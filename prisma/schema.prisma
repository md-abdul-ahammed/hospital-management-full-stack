// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id               String            @id @default(uuid())
  fullName         String            @map("full_name")
  email            String            @unique
  phoneNumber      String            @unique @map("phone_number")
  role             String            @default("doctor")
  qualification    String
  specializationId String            @map("specialization_id")
  specialization   Specialization    @relation(fields: [specializationId], references: [id])
  password         String
  isPasswordReset  Boolean           @default(false) @map("is_password_reset")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  availablity      AvailableDoctor[]

  @@map("doctors")
}

model Specialization {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  doctors     Doctor[]
  services    Service[]

  @@map("specialization")
}

model Patient {
  id             String          @id @default(uuid())
  fullName       String          @map("full_name")
  email          String          @unique
  phoneNumber    String          @unique @map("phone_number")
  role           String          @default("patient")
  password       String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  medicalProfile MedicalProfile?
  appointments   Appointment[]

  @@map("patients")
}

model MedicalProfile {
  id               String   @id @default(uuid())
  profilePicture   String?  @map("profile_picture")
  address          String
  dob              String   @map("date_of_birth")
  gender           String
  medicalHistory   String?  @map("medical_history")
  emergencyContact String   @map("emergency_contact")
  profileStatus    String   @map("profile_status")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  patientId        String   @unique @map("patient_id")
  patient          Patient  @relation(fields: [patientId], references: [id])

  @@map("medical_profile")
}

model Appointment {
  id                 String           @id @default(uuid())
  appointmentDate    DateTime         @map("appointment_date")
  status             String           @map("appointment_status")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  patientId          String           @map("patient_id")
  patient            Patient          @relation(fields: [patientId], references: [id])
  availableServiceId String           @map("available_service_id")
  availableServive   AvailableService @relation(fields: [availableServiceId], references: [id])
  payment            Payment?

  @@map("appointments")
}

model AvailableDoctor {
  id                String             @id @default(uuid())
  availableDate     DateTime           @map("available_date")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  availableServices AvailableService[]
  slotId            String             @map("slot_id")
  slot              TimeSlot           @relation(fields: [slotId], references: [id])
  doctorId          String             @map("doctor_id")
  doctor            Doctor             @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, slotId, availableDate])
  @@map("available_doctors")
}

model AvailableService {
  id                String          @id @default(uuid())
  slotDate          DateTime        @map("slot_Date")
  availableSeats    Int             @map("available_seats")
  isBooked          Boolean         @default(false) @map("is_booked")
  fees              String
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  appointments      Appointment[]
  availableDoctorId String          @map("available_doctor_id")
  availableDoctor   AvailableDoctor @relation(fields: [availableDoctorId], references: [id])
  slotId            String          @map("slot_id")
  slot              TimeSlot        @relation(fields: [slotId], references: [id])
  serviceId         String          @map("service_id")
  service           Service         @relation(fields: [serviceId], references: [id])

  @@unique([slotId, availableDoctorId, slotDate, serviceId])
  @@map("available_services")
}

model TimeSlot {
  id                String             @id @default(uuid())
  startTime         String             @map("start_time")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  availableServices AvailableService[]
  availableDoctors  AvailableDoctor[]

  @@map("time_slots")
}

model Service {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  availableServices AvailableService[]
  specializationId  String             @map("specialization_id")
  specialization    Specialization     @relation(fields: [specializationId], references: [id])

  @@map("services")
}

model Admin {
  id              String   @id @default(uuid())
  fullName        String   @map("full_name")
  email           String   @unique
  phoneNumber     String   @unique @map("phone_number")
  password        String
  role            String   @default("admin")
  isPasswordReset Boolean  @default(false) @map("is_password_reset")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Payment {
  id            String      @id @default(uuid())
  amount        String
  paymentDate   DateTime?   @map("payment_date")
  paymentStatus String      @map("payment_status")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  appointmentId String      @unique @map("appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}
